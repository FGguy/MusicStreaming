// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: users.sql

package sql

import (
	"context"
)

const deleteUser = `-- name: DeleteUser :one
DELETE FROM Users 
WHERE name = $1 RETURNING name, password
`

func (q *Queries) DeleteUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, name)
	var i User
	err := row.Scan(&i.Name, &i.Password)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT name, password FROM Users
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(&i.Name, &i.Password)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO Users (name, password)
VALUES ($1, $2) 
ON CONFLICT (name) DO UPDATE SET name = EXCLUDED.name
RETURNING name, password
`

type InsertUserParams struct {
	Name     string
	Password string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.Name, arg.Password)
	var i User
	err := row.Scan(&i.Name, &i.Password)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE Users SET password = $2
WHERE name = $1 RETURNING name, password
`

type UpdateUserPasswordParams struct {
	Name     string
	Password string
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserPassword, arg.Name, arg.Password)
	var i User
	err := row.Scan(&i.Name, &i.Password)
	return i, err
}
