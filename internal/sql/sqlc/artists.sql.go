// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: artists.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createArtist = `-- name: CreateArtist :one
INSERT INTO Artists (name, cover_art, album_count)
VALUES ($1, $2, $3) RETURNING artist_id, name, cover_art, album_count
`

type CreateArtistParams struct {
	Name       string
	CoverArt   pgtype.Text
	AlbumCount pgtype.Int4
}

func (q *Queries) CreateArtist(ctx context.Context, arg CreateArtistParams) (Artist, error) {
	row := q.db.QueryRow(ctx, createArtist, arg.Name, arg.CoverArt, arg.AlbumCount)
	var i Artist
	err := row.Scan(
		&i.ArtistID,
		&i.Name,
		&i.CoverArt,
		&i.AlbumCount,
	)
	return i, err
}

const getArtist = `-- name: GetArtist :one
SELECT artist_id, name, cover_art, album_count FROM Artists
WHERE artist_id = $1 LIMIT 1
`

func (q *Queries) GetArtist(ctx context.Context, artistID int32) (Artist, error) {
	row := q.db.QueryRow(ctx, getArtist, artistID)
	var i Artist
	err := row.Scan(
		&i.ArtistID,
		&i.Name,
		&i.CoverArt,
		&i.AlbumCount,
	)
	return i, err
}

const getArtists = `-- name: GetArtists :many
SELECT artist_id, name, cover_art, album_count FROM Artists
`

func (q *Queries) GetArtists(ctx context.Context) ([]Artist, error) {
	rows, err := q.db.Query(ctx, getArtists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Artist
	for rows.Next() {
		var i Artist
		if err := rows.Scan(
			&i.ArtistID,
			&i.Name,
			&i.CoverArt,
			&i.AlbumCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
