// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: albums.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAlbum = `-- name: CreateAlbum :one
INSERT INTO Albums (artist_id, name, cover_art, song_count, created, duration, artist)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING album_id, artist_id, name, cover_art, song_count, created, duration, artist
`

type CreateAlbumParams struct {
	ArtistID  pgtype.Int4
	Name      string
	CoverArt  pgtype.Text
	SongCount pgtype.Int4
	Created   pgtype.Timestamp
	Duration  pgtype.Int4
	Artist    pgtype.Text
}

func (q *Queries) CreateAlbum(ctx context.Context, arg CreateAlbumParams) (Album, error) {
	row := q.db.QueryRow(ctx, createAlbum,
		arg.ArtistID,
		arg.Name,
		arg.CoverArt,
		arg.SongCount,
		arg.Created,
		arg.Duration,
		arg.Artist,
	)
	var i Album
	err := row.Scan(
		&i.AlbumID,
		&i.ArtistID,
		&i.Name,
		&i.CoverArt,
		&i.SongCount,
		&i.Created,
		&i.Duration,
		&i.Artist,
	)
	return i, err
}

const getAlbum = `-- name: GetAlbum :one
SELECT album_id, artist_id, name, cover_art, song_count, created, duration, artist FROM Albums
WHERE album_id = $1 LIMIT 1
`

func (q *Queries) GetAlbum(ctx context.Context, albumID int32) (Album, error) {
	row := q.db.QueryRow(ctx, getAlbum, albumID)
	var i Album
	err := row.Scan(
		&i.AlbumID,
		&i.ArtistID,
		&i.Name,
		&i.CoverArt,
		&i.SongCount,
		&i.Created,
		&i.Duration,
		&i.Artist,
	)
	return i, err
}

const getAlbums = `-- name: GetAlbums :many
SELECT album_id, artist_id, name, cover_art, song_count, created, duration, artist FROM Albums
WHERE artist_id = $1
`

func (q *Queries) GetAlbums(ctx context.Context, artistID pgtype.Int4) ([]Album, error) {
	rows, err := q.db.Query(ctx, getAlbums, artistID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Album
	for rows.Next() {
		var i Album
		if err := rows.Scan(
			&i.AlbumID,
			&i.ArtistID,
			&i.Name,
			&i.CoverArt,
			&i.SongCount,
			&i.Created,
			&i.Duration,
			&i.Artist,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
